<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>opencv杂记</title>
      <link href="/2024/05/17/opencv-za-ji/"/>
      <url>/2024/05/17/opencv-za-ji/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -OpenCV -C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习计划</title>
      <link href="/2024/05/09/xue-xi-ji-hua/"/>
      <url>/2024/05/09/xue-xi-ji-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="学习计划（暂定）"><a href="#学习计划（暂定）" class="headerlink" title="学习计划（暂定）"></a>学习计划（暂定）</h3><h3 id="pencil2-每日目标"><a href="#pencil2-每日目标" class="headerlink" title=":pencil2:每日目标"></a><span class="github-emoji"><span>✏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>每日目标</h3><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> leetcode：每日一题 (30min + 复盘10min) <span class="github-emoji"><span>🔰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f530.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>c++条款：每日一个(20min + 测试10min) 【二个月完成所有条款】【0/55】​ <span class="github-emoji"><span>💪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>计算机图像相关英语单词 （10words  10min）【0/10】<span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><span class="github-emoji"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>B站：c++工具和特性（40 min）【c++11特性，容器，第三方工具】<span class="github-emoji"><span>💦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><span class="github-emoji"><span>📌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> ​ ​ ​总时长2小时（若加班晚，视情况放弃<span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</p><h3 id="pencil-每周目标"><a href="#pencil-每周目标" class="headerlink" title=":pencil:每周目标"></a><span class="github-emoji"><span>📝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>每周目标</h3><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>图像相关前沿论文【含深度学习，传统机器学习，计算机图形学】</p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>更新1-2篇技术博客【包括但不限于算法，c++，第三方库学习，linux应用】</p><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>code review 【每周300-500行】【工作无关代码，需在git提交redmine笔记】</p>]]></content>
      
      
      
        <tags>
            
            <tag> -C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++学习</title>
      <link href="/2024/05/09/c-xue-xi/"/>
      <url>/2024/05/09/c-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="C-学习笔记"><a href="#C-学习笔记" class="headerlink" title="C++学习笔记"></a>C++学习笔记</h1><h2 id="1-通过操作符重载返回私有变量"><a href="#1-通过操作符重载返回私有变量" class="headerlink" title="1.通过操作符重载返回私有变量"></a>1.通过操作符重载返回私有变量</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;class MyClass {private:    int data;  // 私有成员变量public:    // 构造函数    MyClass(int value) {        data = value;    }    // 析构函数    ~MyClass() {}    inline operator int*();    // 操作符重载函数，返回指针成员变量};inline MyClass::operator int*(){    return &amp;data;}int main() {    MyClass obj(42);int* a = obj;    // 通过重载运算符，可以像操作指针一样访问私有成员变量    std::cout &lt;&lt; "Value using operator: " &lt;&lt; *a &lt;&lt; std::endl;        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义了一个名为 <code>MyClass</code> 的类，其中包含了一个私有成员变量 <code>int data</code>。在类中，重载了 <code>int*</code> 类型的类型转换操作符，使得可以将 <code>MyClass</code> 对象转换为 <code>int*</code> 指针。</p><p>在 <code>main</code> 函数中，通过创建 <code>MyClass</code> 对象 <code>obj</code>，然后将其转换为 <code>int*</code> 指针并赋给了指针变量 <code>a</code>。通过指针 <code>a</code> 可以访问 <code>MyClass</code> 对象的私有成员变量 <code>data</code> 的值，然后将其输出到标准输出流中。</p><p>该代码返回的是一个指向 <code>data</code> 成员变量的指针，但这个指针仅仅提供了读取 <code>data</code> 值的能力，而不提供修改 <code>data</code> 的能力。因此，从这个角度来说，该类是相对安全的，因为它不允许外部代码修改私有成员变量的值。</p><p>但是，虽然返回指针的操作不会直接暴露私有成员变量，但仍然需要谨慎使用，以确保外部代码不会误用这个指针，例如在 <code>MyClass</code> 对象生命周期结束后，仍然使用指针访问已经被销毁的内存。</p><h2 id="2-智能指针详解"><a href="#2-智能指针详解" class="headerlink" title="2.智能指针详解"></a>2.智能指针详解</h2><ol><li><p><code>std::unique_ptr&lt;T&gt;</code> ：独占资源所有权的指针。</p></li><li><p><code>std::shared_ptr&lt;T&gt;</code> ：共享资源所有权的指针。</p></li><li><p><code>std::weak_ptr&lt;T&gt;</code> ：共享资源的观察者，需要和 <code>std::shared_ptr</code> 一起使用，不影响资源的生命周期。</p></li></ol><h3 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a>std::unique_ptr</h3><p><strong>特性：</strong></p><ol><li><p>离开作用域的时候自动释放内存</p></li><li><p>move-only:</p></li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">{    std::unique_ptr&lt;int&gt; uptr = std::make_unique&lt;int&gt;(200);    std::unique_ptr&lt;int&gt; uptr1 = uptr;  // 编译错误，std::unique_ptr&lt;T&gt; 是 move-only 的    std::unique_ptr&lt;int&gt; uptr2 = std::move(uptr);    assert(uptr == nullptr);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>可指向数组： <code>std::unique_ptr&lt;int[]&gt; uptr = std::make_unique&lt;int[]&gt;(10);</code>实际上是一个数组指针</p></li><li><p>自定义销毁方式：</p><p>a. 使用函数对象类（重载了operator()的类）作为删除器</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">{    struct FileCloser {        void operator()(FILE* fp) const {            if (fp != nullptr) {                fclose(fp);            }        }       };      std::unique_ptr&lt;FILE, FileCloser&gt; uptr(fopen("test_file.txt", "w"));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b. 使用函数指针</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void CustomDeleter(T* ptr) {    // 自定义清理代码    delete ptr;}int main() {    std::unique_ptr&lt;T, decltype(&amp;CustomDeleter)&gt; uptr(new T, CustomDeleter);    // uptr 拥有一个 T 类型的对象，并使用 CustomDeleter 函数进行清理    // ...} // 当 uptr 离开作用域时，CustomDeleter 函数会被调用，释放所拥有的资源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>c. 使用lamda表达式</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">{    std::unique_ptr&lt;T, std::function&lt;void(T*)&gt;&gt; uptr(new T, [](T* ptr) {        // 自定义清理代码        delete ptr;    });    // uptr 拥有一个 T 类型的对象，并使用 lambda 表达式进行清理} // 当 uptr 离开作用域时，lambda 表达式会被调用，释放所拥有的资源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h3><p><strong>特性：</strong>对资源做引用计数，当引用计数为 0 的时候，自动释放资源。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">{    std::shared_ptr&lt;int&gt; sptr = std::make_shared&lt;int&gt;(200);    assert(sptr.use_count() == 1);  // 此时引用计数为 1    {           std::shared_ptr&lt;int&gt; sptr1 = sptr;        assert(sptr.get() == sptr1.get());        assert(sptr.use_count() == 2);   // sptr 和 sptr1 共享资源，引用计数为 2    }       assert(sptr.use_count() == 1);   // sptr1 已经释放}// use_count 为 0 时自动释放内存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>shared_ptr也可以指向数组和自定义deleter</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">{    // C++20 才支持 std::make_shared&lt;int[]&gt;    // std::shared_ptr&lt;int[]&gt; sptr = std::make_shared&lt;int[]&gt;(100);    std::shared_ptr&lt;int[]&gt; sptr(new int[10]);    for (int i = 0; i &lt; 10; i++) {        sptr[i] = i * i;    }       for (int i = 0; i &lt; 10; i++) {        std::cout &lt;&lt; sptr[i] &lt;&lt; std::endl;    }   }{    std::shared_ptr&lt;FILE&gt; sptr(        fopen("test_file.txt", "w"), [](FILE* fp) {            std::cout &lt;&lt; "close " &lt;&lt; fp &lt;&lt; std::endl;            fclose(fp);        });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="std-shared-ptr实现原理"><a href="#std-shared-ptr实现原理" class="headerlink" title="std::shared_ptr实现原理"></a>std::shared_ptr实现原理</h4><p>shared_ptr对象的内存开销要比裸指针和无自定义的deleter的unique_ptr对象略大。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">std::cout &lt;&lt; sizeof(int*) &lt;&lt; std::endl;  // 输出 8std::cout &lt;&lt; sizeof(std::unique_ptr&lt;int&gt;) &lt;&lt; std::endl;  // 输出 8std::cout &lt;&lt; sizeof(std::unique_ptr&lt;FILE, std::function&lt;void(FILE*)&gt;&gt;)&lt;&lt; std::endl;  // 输出 40std::cout &lt;&lt; sizeof(std::shared_ptr&lt;int&gt;) &lt;&lt; std::endl;  // 输出 16std::shared_ptr&lt;FILE&gt; sptr(fopen("test_file.txt", "w"), [](FILE* fp) {    std::cout &lt;&lt; "close " &lt;&lt; fp &lt;&lt; std::endl;    fclose(fp);}); std::cout &lt;&lt; sizeof(sptr) &lt;&lt; std::endl;  // 输出 16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>std::shared_ptr</code> 对象的大小并不受其自定义删除器的影响，因为删除器的信息通常存储在控制块中，而不是 <code>std::shared_ptr</code> 对象本身。但自定义<code>deleter</code>的<code>unique_ptr</code>需要保存<code>deleter</code>信息。</p><p><code>std::shared_ptr</code> 共享同一块内存，以便在最后一个引用被销毁时释放这块内存。因此需要维护两个信息：</p><ol><li><p>指向共享资源的指针。</p></li><li><p>引用计数块（控制块），该块包含了一个<strong>引用计数</strong>、一个<strong>指向被共享对象的指针</strong>、析构器和自定义删除器、弱引用计数。</p></li></ol><p><img src="/2024/05/09/c-xue-xi/v2-b0bf2ba18de7f3a364dda717a0a51c54_720w-1715226003619.webp" alt="img"></p><p>当拷贝构造和拷贝赋值时，<code>std::shared_ptr&lt;T&gt; sptr2 = sptr1</code></p><p><img src="/2024/05/09/c-xue-xi/v2-e48536157d6181fdb97181769a7c364a_720w-1715226003619.webp" alt="img"></p><p>指向共享资源的指针在 <code>shared_ptr</code> 的设计中是必需的，它是 <code>shared_ptr</code> 能够正常工作的关键组成部分。去掉这个指针会破坏 <code>shared_ptr</code> 的核心功能，可能导致资源访问和释放的不确定行为。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Fruit {    int juice;};struct Vegetable {    int fiber;};struct Tomato : public Fruit, Vegetable {    int sauce;}; // 由于继承的存在，shared_ptr 可能指向基类对象std::shared_ptr&lt;Tomato&gt; tomato = std::make_shared&lt;Tomato&gt;();std::shared_ptr&lt;Fruit&gt; fruit = tomato;std::shared_ptr&lt;Vegetable&gt; vegetable = tomato;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>std::shared_ptr</code> 中，”aliasing constructor” 是指通过一个已存在的 <code>shared_ptr</code> 创建另一个 <code>shared_ptr</code> 的构造函数。这种构造函数的存在允许多个 <code>shared_ptr</code> 共享同一个对象，而不会导致对象被提前释放。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//自定义删除器template&lt;class Y, class Deleter&gt;shared_ptr(Y* ptr, Deleter d, shared_ptr&lt;T&gt; const&amp; s);//相同删除器template&lt;class Y&gt;shared_ptr(Y* ptr, shared_ptr&lt;T&gt; const&amp; s);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 使用<code>std::shared_ptr</code> 时，会涉及两次内存分配：一次分配共享资源对象；一次分配控制块。C++ 标准库提供了<code>std::make_share </code>函数来创建一个 <code>shared_ptr</code>对象，只需要一次内存分配。</p><p><img src="/2024/05/09/c-xue-xi/v2-49e619699b5c924097e027cd173df758_720w-1715226003619.webp" alt="img"></p><h3 id="std-weak-ptr"><a href="#std-weak-ptr" class="headerlink" title="std::weak_ptr"></a>std::weak_ptr</h3><p><code>std::weak_ptr</code> 要与 <code>std::shared_ptr</code> 一起使用。 一个<code>std::weak_ptr</code>对象看做是 <code>std::shared_ptr</code>对象管理的资源的观察者，它不影响共享资源的生命周期：</p><ol><li><p>如果需要使用<code>weak_ptr</code>正在观察的资源，可以将<code>weak_ptr</code>提升为<code>shared_ptr</code>。</p></li><li><p>当<code>shared_ptr</code>管理的资源被释放时,<code>weak_ptr</code>会自动变成 nullptr。</p></li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Observe(std::weak_ptr&lt;int&gt; wptr) {if (auto sptr = wptr.lock()) {        std::cout &lt;&lt; "value: " &lt;&lt; *sptr &lt;&lt; std::endl;    } else {        std::cout &lt;&lt; "wptr lock fail" &lt;&lt; std::endl;    }}std::weak_ptr&lt;int&gt; wptr;{    auto sptr = std::make_shared&lt;int&gt;(111);    wptr = sptr;    Observe(wptr);  // sptr 指向的资源没被释放，wptr 可以成功提升为 shared_ptr}Observe(wptr);  // sptr 指向的资源已被释放，wptr 无法提升为 shared_ptr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/05/09/c-xue-xi/v2-5f40e9422551bb244753e87ef43d1e64_720w-1715226003619.webp" alt="img"></p><p><code>weak_ptr</code> 也可以与 <code>shared_ptr</code> 共享同一个控制块。但是，<code>weak_ptr</code> 并不增加对象的引用计数。它只是允许你观察 <code>shared_ptr</code> 所管理的对象是否还存在。当 <code>shared_ptr</code> 的引用计数降为零时，对象被销毁，但是控制块仍然存在。</p><p><img src="/2024/05/09/c-xue-xi/v2-f387c7135acf9101029fc4981ce2269b_720w-1715226003619.webp" alt="img"></p><p><code>weak_ptr</code> 可以通过控制块判断对象是否存活，而不会增加对象的引用计数。这种机制可以用于避免循环引用。如果两个对象互相持有对方的 <code>shared_ptr</code>，它们的引用计数永远不会降为零，导致内存泄漏。通过使用 <code>weak_ptr</code>，可以在不增加引用计数的情况下进行判断对象是否存在，从而避免循环引用导致的内存泄漏。</p><h4 id="std-enable-shared-from-this"><a href="#std-enable-shared-from-this" class="headerlink" title="std::enable_shared_from_this"></a>std::enable_shared_from_this</h4><p><code>std::enable_shared_from_this</code> 是 C++ 标准库提供的一个辅助类，它用于在类中获取指向当前对象的 <code>std::shared_ptr</code>，以避免潜在的循环引用问题。通常，如果一个对象需要在某些地方持有自己的 <code>std::shared_ptr</code>，而不是裸指针，可以继承自 <code>std::enable_shared_from_this</code>。</p><p>这个类提供了一个成员函数 <code>shared_from_this()</code>，该函数返回一个指向当前对象的 <code>std::shared_ptr</code>。这个函数仅在对象被一个 <code>std::shared_ptr</code> 管理时调用是安全的。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;memory&gt;class Bar: public std::enable_shared_from_this&lt;MyClass&gt; {public:    std::shared_ptr&lt;Bar&gt; getShared() {        // 使用 shared_from_this() 获取指向当前对象的 shared_ptr        return shared_from_this();    }    ~Bar() {        std::cout &lt;&lt; "Bar destructed" &lt;&lt; std::endl;    }};int main() {    // 创建一个 shared_ptr，该指针管理 Bar 对象    std::shared_ptr&lt;Bar&gt; ptr = std::make_shared&lt;Bar&gt;();    // 在 MyClass 对象内部获取指向自己的 shared_ptr    std::shared_ptr&lt;Bar&gt; ptrFromThis = ptr-&gt;getShared();    // 输出 "Bar destructed"，因为 ptr 和 ptrFromThis 的引用计数为 0    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般情况下，继承了 std::enable_shared_from_this 的子类，成员变量中增加了一个指向 this 的 weak_ptr。这个 weak_ptr 在第一次创建 shared_ptr 的时候会被初始化，指向 this。</p><p><img src="/2024/05/09/c-xue-xi/v2-fbbbc83da3c87fe48817a4cbda49ce03_720w-1715226003619.webp" alt="img"></p><p>参考自知乎文章：<a href="https://zhuanlan.zhihu.com/p/150555165">现代 C++：一文读懂智能指针 - 知乎 (zhihu.com)</a></p><h2 id="3-string"><a href="#3-string" class="headerlink" title="3.string"></a>3.string</h2><h3 id="3-1-C-中string-npos的用法总结"><a href="#3-1-C-中string-npos的用法总结" class="headerlink" title="3.1 C++中string::npos的用法总结"></a>3.1 C++中string::npos的用法总结</h3><p><strong>定义</strong>：来源于cplusplus.com</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">static const size_t npos=-1;Maximum value for size_tnpos is a static member constant value with the greatest possible value for an element of type size_t.This value, when used as the value for a len (or sublen) parameter in string’s member functions, means “until the end of the string”.As a return value, it is usually used to indicate no matches.This constant is defined with a value of -1, which because size_t is an unsigned integral type, it is the largest possible representable value for this type.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==npos表明为size_t的最大值，在字符串的成员函数中作为字符串的末尾，作为返回值表示找不到匹配项 在容器中类型一般表示为：std::container_type::size_type==，例如std::string::nops</p><p>test1：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;limits&gt;  #include &lt;string&gt;  using namespace std;    int main()  {      size_t npos = -1;      cout &lt;&lt; "npos: " &lt;&lt; npos &lt;&lt; endl;      cout &lt;&lt; "size_t max: " &lt;&lt; numeric_limits&lt;size_t&gt;::max() &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上输出均为4294967295，也就是size_t的最大值。</p><h3 id="3-2-npos的用法"><a href="#3-2-npos的用法" class="headerlink" title="3.2 npos的用法"></a>3.2 npos的用法</h3><p>1.作为find()的返回值，在string中找不到指定值返回string::npos，例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main(){    string s = "abcde";    char a = 'g';    if(s.find(a) == string::npos){        cout &lt;&lt; "failed" &lt;&lt; endl;    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.string::npos作为成员函数的len时，表示字符串结束标志。例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main(){    string s = "abcde";    string a = "fg";    s = s.replace(4, string::npos, a);    cout &lt;&lt; s &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出abcdfg，表示从第4个位置开始到string的剩余部分均由a取代。</p><p>注意事项：string::npos的类型必须为string::size_type，其中size为大小，缺省配置器以size_t作为size_type，因此-1 被转换为无符号整数，也就是最大的无符号值。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux网络编程</title>
      <link href="/2022/09/05/linux-wang-luo-bian-cheng/"/>
      <url>/2022/09/05/linux-wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux开发（c-）"><a href="#Linux开发（c-）" class="headerlink" title="Linux开发（c++）"></a>Linux开发（c++）</h1><h1 id="1-linux基础"><a href="#1-linux基础" class="headerlink" title="1. linux基础"></a>1. linux基础</h1><h3 id="1-1-GCC"><a href="#1-1-GCC" class="headerlink" title="1.1 GCC"></a>1.1 GCC</h3><p>GCC：“GNU Compiler Collection”，是一组编译器集合，支持C、C++、Objective-C、Objective-C++、Go和RBIG语言的编译。、</p><p>GCC完整的编译过程分为4个阶段，分别为预处理、编译、装载和链接。</p><h3 id="1-2-GCC编译的输出参数"><a href="#1-2-GCC编译的输出参数" class="headerlink" title="1.2 GCC编译的输出参数"></a>1.2 GCC编译的输出参数</h3><p>  由于GCC是一组编译器集合，因此输入的文件后缀名决定了GCC的编译方式，下面列出了常见的文件后缀名对应的编译方式：</p><table><thead><tr><th align="center">文件后缀名</th><th align="center">编译方式</th></tr></thead><tbody><tr><td align="center">.c</td><td align="center">C语言源代码，并且需要进行预处理</td></tr><tr><td align="center">.i</td><td align="center">已经预处理完成后的C语言源代码</td></tr><tr><td align="center">.ii</td><td align="center">已经预处理完成后的C++源代码</td></tr><tr><td align="center">.m</td><td align="center">Objective-C源代码，并且必须进行libobjc库的链接</td></tr><tr><td align="center">.mi</td><td align="center">已经预处理完成后的Objective-C源代码</td></tr><tr><td align="center">.M或.mm</td><td align="center">Objective-C++源代码，并且必须进行libobjc库的链接</td></tr><tr><td align="center">.mii</td><td align="center">已经预处理完成后的Objective-C++源代码</td></tr><tr><td align="center">.h</td><td align="center">C,C++,Objective-C的头文件，会被处理进预编译头</td></tr><tr><td align="center">.cc , .cp , .cxx , .cpp , .CPP , .c++ , .C</td><td align="center">C++语言源文件，需要进行预编译处理</td></tr><tr><td align="center">.f , .for , .ftn</td><td align="center">已经预处理完成后的Fortran语言源文件</td></tr><tr><td align="center">.F , .FOR , .fpp , .FPP , .FTN</td><td align="center">Fortran语言源文件，需要进行预编译处理</td></tr><tr><td align="center">go</td><td align="center">Go语言源文</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><p>下面以一个简单的C语言源文件来作为示例文件进行GCC的编译演示，首先编写一个简单的C程序如下，将文件名命名为a.c：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;stdio.h&gt;int main(int argc, char const *argv[]){printf("%s\n","Hello");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-1-预编译处理"><a href="#1-2-1-预编译处理" class="headerlink" title="1.2.1 预编译处理"></a>1.2.1 预编译处理</h4><p>  使用 -E 参数设置GCC只进行预编译处理，例如对上面的a.c源文件执行如下的GCC命令：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">gcc a.c -E &gt; a.i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>GCC会将编译后的内容输出到a.i文件中，打开a.i文件 里面包含对#include文件的复制以及宏定义的替换等。</p><p>  使用 -S 参数设置GCC进行编译功能，可以将预处理后的文件编译为汇编源代码，例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">gcc a.i -S &gt; a.S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>.S为后缀名的文件为汇编源文件，-S编译是高级语言向低级语言转换的过程。</p><p>使用 -c 参数设置GCC进行编译，可以将汇编后的汇编源文件编译成机器代码。例如：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">gcc a.i -c &gt; a.o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>.o文件是机器码。-c编译是编程语言向机器语言转换的过程。</p><p>除了上面提到的几个参数外，可以使用-o参数直接生成目标文件，这个参数会根据输入文件的后缀名进行处理，直接生成可执行文件，例如：</p><pre class="line-numbers language-none"><code class="language-none">gcc a.o -o a.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-GCC常用参数"><a href="#1-3-GCC常用参数" class="headerlink" title="1.3 GCC常用参数"></a>1.3 GCC常用参数</h3><table><thead><tr><th align="center">gcc编译选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-E</td><td align="center">预处理指定的源文件，不进行编译</td></tr><tr><td align="center">-S</td><td align="center">编译指定的源文件，但是不进行汇编</td></tr><tr><td align="center">-c</td><td align="center">编译、汇编指定的源文件，但是不进行链接</td></tr><tr><td align="center">-o [file1] [file2] / [file2] -o [file1]</td><td align="center">将文件 file2 编译成可执行文件 file1</td></tr><tr><td align="center">-I directory</td><td align="center">指定 include 包含文件的搜索目录</td></tr><tr><td align="center">-g</td><td align="center">在编译的时候，生成调试信息，该程序可以被调试器调试</td></tr><tr><td align="center">-D</td><td align="center">在程序编译的时候，指定一个宏</td></tr><tr><td align="center">-w</td><td align="center">不生成任何警告信息</td></tr><tr><td align="center">-Wall</td><td align="center">生成所有警告信息</td></tr><tr><td align="center">-On</td><td align="center">n的取值范围：0~3。编译器的优化选项的4个级别，-O0表 示没有优化，-O1为缺省值，-O3优化级别最高</td></tr><tr><td align="center">-l</td><td align="center">在程序编译的时候，指定使用的库</td></tr><tr><td align="center">-L</td><td align="center">指定编译的时候，搜索的库的路径。</td></tr><tr><td align="center">-fPIC/fpic</td><td align="center">生成与位置无关的代码</td></tr><tr><td align="center">-shared</td><td align="center">生成共享目标文件，通常用在建立共享库时</td></tr><tr><td align="center">-std</td><td align="center">指定C方言，如:-std=c99，gcc默认的方言是GNU C</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="1-4-静态库的制作"><a href="#1-4-静态库的制作" class="headerlink" title="1.4 静态库的制作"></a>1.4 静态库的制作</h3><p>◼ 命名规则：</p><p>​    ◆ Linux : libxxx.a  lib : 前缀（固定） xxx : 库的名字，自己起 .a : 后缀（固定） </p><p>​    ◆ Windows : <font color="#ff69b4" style="background:yellow">libxxx.lib</font> </p><p>◼ 静态库的制作： </p><p>​    ◆ gcc 获得 .o 文件 </p><p>​    ◆ 将 .o 文件打包，使用 ar 工具（archive） <font color="red">ar rcs libxxx.a xxx.o xxx.o</font> </p><p>​            r – 将文件插入备存文件中 c – 建立备存文件 s – 索引</p><h3 id="1-5-动态库的制作"><a href="#1-5-动态库的制作" class="headerlink" title="1.5 动态库的制作"></a>1.5 动态库的制作</h3><p>◼命名规则： </p><p>​    ◆ Linux : libxxx.so lib : 前缀（固定） xxx : 库的名字，自己起 .so : 后缀（固定） 在Linux下是一个可执行文件 </p><p>​    ◆ Windows : libxxx.dll </p><p>◼ 动态库的制作：</p><p>​    ◆ gcc 得到 .o 文件，得到和位置无关的代码 <font color="red">gcc -c –fpic/-fPIC a.c b.c</font> </p><p>​    ◆ gcc 得到动态库<font color="red"> gcc -shared a.o b.o -o libcalc.so</font></p><p>◼ 静态库：GCC 进行链接时，会把静态库中代码打包到可执行程序中 </p><p>◼ 动态库：GCC 进行链接时，动态库的代码不会被打包到可执行程序中 </p><p>◼ 程序启动之后，动态库会被动态加载到内存中，通过 ldd （list dynamic dependencies）命令检查动态库依赖关系 </p><p>◼ 如何定位共享库文件呢？ 当系统加载可执行代码时候，能够知道其所依赖的库的名字，但是还需要知道绝对路 径。此时就需要系统的动态载入器来获取该绝对路径。对于elf格式的可执行程序，是 由ld-linux.so来完成的，它先后搜索elf文件的 <strong>DT_RPATH</strong>段 ——&gt; 环境变量 <strong>LD_LIBRARY_PATH</strong> ——&gt; <strong>/etc/ld.so.cache</strong>文件列表 ——&gt; <strong>/lib/，/usr/lib</strong> 目录找到库文件后将其载入内存。</p><h3 id="1-6-对比"><a href="#1-6-对比" class="headerlink" title="1.6 对比"></a>1.6 对比</h3><p><strong>静态库的优缺点</strong></p><p>◼ 优点： </p><p>​    ◆ 静态库被打包到应用程序中加载速度快 </p><p>​    ◆ 发布程序无需提供静态库，移植方便 程序</p><p> ◼ 缺点： </p><p>​    ◆ 消耗系统资源，浪费内存 </p><p>​    ◆ 更新、部署、发布麻烦</p><p><strong>动态库的优缺点</strong></p><p>◼ 优点： </p><p>​    ◆ 可以实现进程间资源共享（共享库） </p><p>​    ◆ 更新、部署、发布简单 </p><p>​    ◆ 可以控制何时加载动态库</p><p>◼ 缺点： </p><p>​    ◆ 加载速度比静态库慢 </p><p>​    ◆ 发布程序时需要提供依赖的动态库</p><h2 id="2-Makefile与GDB调试"><a href="#2-Makefile与GDB调试" class="headerlink" title="2 Makefile与GDB调试"></a>2 Makefile与GDB调试</h2><h3 id="2-1-Makefile"><a href="#2-1-Makefile" class="headerlink" title="2.1 Makefile"></a>2.1 Makefile</h3><p>定义了一系列规则去指定文件编译的先后顺序，文件是否需要重新编译，相当于一个指令集</p><p><strong>◼ Makefile规则</strong></p><ol><li><p>一个Makefile文件中可以有一个或者多个规则 </p><p>​        <font color="red">目标 … ：依赖 …</font></p><p>​            命令（shell命令）</p><p>​            …</p><p><strong>目标：</strong>最终要生成的文件（伪目标除外） </p><p><strong>依赖：</strong>生成目标所需要的文件或是目标 </p><p><strong>命令：</strong>通过执行命令对依赖操作生成目标（命令前必须 Tab 缩进）</p></li></ol><p><strong>Makefile 中的其它规则一般都是为第一条规则服务的。</strong></p><p>◼ 命令在执行之前，需要先检查规则中的依赖是否存在 </p><p>​     如果存在，执行命令 </p><p>​     如果不存在，向下检查其它的规则，检查有没有一个规则是用来生成这个依赖的， 如果找到了，则执行该规则中的命令 </p><p>◼ 检测更新，在执行规则中的命令时，会比较目标和依赖文件的时间 </p><p>​     如果依赖的时间比目标的时间晚，需要重新生成目标 </p><p>​     如果依赖的时间比目标的时间早，目标不需要更新，对应规则中的命令不需要被 执行</p><p><strong>注意事项：</strong></p><pre><code>1. 如果第一个规则有多个依赖，可续可以分别对单个依赖写规则</code></pre><h4 id="2-1-1书写变量"><a href="#2-1-1书写变量" class="headerlink" title="2.1.1书写变量"></a>2.1.1书写变量</h4><p>◼ 自定义变量 </p><p>​    变量名=变量值 var=hello </p><p>◼ 预定义变量 </p><p>​    AR : 归档维护程序的名称，默认值为 ar </p><p>​    CC : C 编译器的名称，默认值为 cc </p><p>​    CXX : C++ 编译器的名称，默认值为 g++ </p><p>​    $@ : 目标的完整名称 </p><p>​    $&lt; : 第一个依赖文件的名称 </p><p>​    $^ : 所有的依赖文件 </p><p>◼ 获取变量的值 </p><p>​    $(变量名)</p><p>​    $(var)</p><p>自动变量只能在规则的命令中使用 </p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">app</span><span class="token punctuation">:</span>main.c a.c b.cgcc -c mian.c a.c b.c -o app<span class="token target symbol"><span class="token variable">$@</span></span><span class="token punctuation">:</span><span class="token variable">$^</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$^</span> -o <span class="token variable">$@</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">%.o</span><span class="token punctuation">:</span>%.c<span class="token target symbol">- %</span><span class="token punctuation">:</span> 通配符，匹配一个字符串- 两个%匹配的是同一个字符串<span class="token target symbol">%.o</span><span class="token punctuation">:</span>%.cgcc -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>◼ $(wildcard PATTERN…) </p><p> 功能：获取指定目录下指定类型的文件列表 </p><p> 参数：PATTERN 指的是某个或多个目录下的对应的某种类型的文件，如果有多 个目录，一般使用空格间隔 </p><p> 返回：得到的若干个文件的文件列表，文件名之间使用空格间隔 </p><p> 示例： </p><p>​    <code>$(wildcard *.c ./sub/*.c)</code></p><p>​    返回值格式: a.c b.c c.c d.c e.c f.c</p><p>◼ $(patsubst <parttern>,<replacement>,<text>)</text></replacement></parttern></p><p> 功能：查找<text>中的单词(单词以“空格”、“Tab”或“回车”“换行”分隔)是否符合<pattern>模式，如果匹配的话，则以<replacement>替换。 </replacement></pattern></text></p><p> <pattern>可以包括通配符<code>%</code>，表示任意长度的字串。如果<replacement>中也包含<code>%</code>，那么，<replacement>中的这个<code>%</code>将是<parttern>中的那个% 所代表的字串。(可以用<code>\</code>来转义，以<code>\%</code>来表示真实含义的<code>%</code>字符) </parttern></replacement></replacement></pattern></p><p> 返回：函数返回被替换过后的字符串 </p><p> 示例：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">patsubst</span> %.c, %.o, x.c bar.c<span class="token punctuation">)</span><span class="token target symbol">返回值格式</span><span class="token punctuation">:</span> x.o bar.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>◼.PHONY：target 表示target是一个伪目标，不会生成文件</p><h3 id="2-2-GDB"><a href="#2-2-GDB" class="headerlink" title="2.2 GDB"></a>2.2 GDB</h3><p>GDB:断点调试工具 编译时使用<code>-g</code>打开调式选项，另外使用<code>-wall</code>选项打开所有warning.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -g -Wall program.c -o program<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>命令：</strong></p><p>◼ 启动和退出  gdb 可执行程序  quit  退出</p><p>◼ 给程序设置参数/获取设置参数 set args 10 20       show args</p><p> ◼ GDB 使用帮助    help</p><p>◼ 查看当前文件代码 list/l （从默认位置显示） list/l 行号 （从指定的行显示） list/l 函数名（从指定的函数显示） </p><p>◼ 查看非当前文件代码 list/l 文件名:行号 list/l 文件名:函数名</p><p>◼ 设置显示的行数  <strong>show list/listsize set list/listsize 行数</strong></p><p>◼ 设置断点 b/break 行号   b/break 函数名    b/break 文件名:行号   b/break 文件名:函数 </p><p>◼ 查看断点 i/info b/break </p><p>◼ 删除断点 d/del/delete 断点编号</p><p>◼ 设置断点无效 dis/disable 断点编号 </p><p>◼ 设置断点生效 ena/enable 断点编号 </p><p>◼ 设置条件断点（一般用在循环的位置） b/break 10 if i==5</p><p>◼ 运行GDB程序 start（程序停在第一行） run（遇到断点才停）</p><p>◼ 继续运行，到下一个断点停 c/continue </p><p>◼ 向下执行一行代码（不会进入函数体） n/next </p><p>◼ 变量操作 p/print 变量名（打印变量值） ptype 变量名（打印变量类型）</p><p>◼ 向下单步调试（遇到函数进入函数体） s/step finish（跳出函数体） </p><p>◼ 自动变量操作 display 变量名（自动打印指定变量的值） i/info display (查看编号) undisplay （删除编号） </p><p>◼ 其它操作 set var 变量名=变量值 （循环中用的较多） until （跳出循环）</p><h2 id="IO操作"><a href="#IO操作" class="headerlink" title="IO操作"></a>IO操作</h2><p> C库函数：使用fopen打开文件，返回值FILE *fp,其中<strong>FLIE结构体</strong>里面包括文化描述符（整型值，索引），文件读写指针（位置），I/O缓存区（内存地址）。</p><p><img src="/2022/09/05/linux-wang-luo-bian-cheng/20200630172111410.png"></p><p><strong>虚拟地址空间：</strong> 3G-4G 内核区（内存管理，进程管理，驱动管理，VFS虚拟文件系统）（）</p><p>​                        0-3G 用户区  从高地址到低地址（环境变量-&gt;命令行参数-&gt;命令行参数-&gt;栈空间（小）-&gt;共享库&lt;-堆空间（大）-&gt;(.bcc（未初始化全局变量） .data（已初始化全局变量） .text 受保护的地址0~4k)）</p><p>虚拟地址空间会被MMU映射到物理内存中。</p><p><strong>文件描述符：</strong>文件描述符表保存在PCB（进程控制块）中。 其中0-&gt;STDIN_FILENO, 1-&gt;STDOUT_FILENO，3-&gt;STDERR_FILENO。</p><p>每个新的文件占用空闲的最小的一个文件描述符。</p><p><strong>IO函数：</strong>fopen(c) -&gt; open</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openmmdetaction</title>
      <link href="/2022/07/01/openmmlab/"/>
      <url>/2022/07/01/openmmlab/</url>
      
        <content type="html"><![CDATA[<h2 id="目标检测"><a href="#目标检测" class="headerlink" title="目标检测"></a>目标检测</h2><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>图像分类：</p><ol><li>将图像切分成多块</li><li>用分类算法对每个图像块进行预测</li><li>检测结果=（分类结果，图像位置）</li></ol><p>问题：图像分块过于粗糙，无法检测分块边界上的物体</p><p><strong>改进</strong>：</p><ol><li>使用重叠的窗口，覆盖更多可能出现物体的位置</li><li>用分类算法检测每个图像块</li><li>检测结果=(分类结果，滑窗位置)</li></ol><p>问题：滑窗边界与物体精确边界有偏差</p><p><strong>改进</strong>：分类的同时预测物体的精确位置 –<strong>边界框回归</strong></p><p><strong>问题</strong>：不同物体大小不同，长宽比不同</p><p><strong>解决方案：</strong></p><ol><li><p>使用大小不同，长宽比不同的滑窗（yolo里面是9种）</p><p><img src="/2022/07/01/openmmlab/image-20220701140554357.png"></p></li><li><p>将图像缩放到不同大小，构建图像金字塔，相同大小的窗口在不同尺寸的图像上可以检测不同尺寸的物体</p></li></ol><p><img src="/2022/07/01/openmmlab/image-20220701140331584.png"></p><p>滑窗 = 空间上的密集预测</p><p>考虑800×600的图像，使用80×60的窗，步长10像素滑动</p><p>需要在4800个窗上进行分类预测</p><p>×每个位置5个尺度的窗</p><p>×每个尺度3个长宽比</p><p>≈检测一张图像需要完成数万次图像分类预测 （<font color="red">难以实现实时检测</font>）</p><p><strong>分析：</strong>大量窗口都落在不包含物体的边界区域。可以先通过简单快速的方法找出可能含物体的区域。</p><p><strong>Selective Search算法：</strong></p><p>使用贪心算法，将空间相邻且特征相似的图像块逐步合并到一起，形成可能包含物体的区域，<strong>称为提议区域或提议框</strong>。</p><p><img src="/2022/07/01/openmmlab/image-20220701150042983.png"></p><h2 id="基于区域的检测方法R-CNN"><a href="#基于区域的检测方法R-CNN" class="headerlink" title="基于区域的检测方法R-CNN"></a>基于区域的检测方法R-CNN</h2><p>两阶段方法：</p><ol><li><p>可学习部分：卷积神经网络的主干，分类器，回归模型</p><p>对于提议框P和标注框B</p><ul><li><p>如果二者重叠较大</p><p>分类目标值 = B的类别标注</p><p>回归目标值 = 编码后的偏差值</p></li><li><p>如果二者重叠较小</p><p>分类目标值 = 背景</p><p>回归分支不计算LOSS</p></li></ul><p><img src="/2022/07/01/openmmlab/image-20220705162437266.png"></p></li><li><p>IOU 定义为两个矩形框交集面积与并集面积的比值</p></li><li><p>非极大值抑制（NMS）</p><p>检测算法有时会针对单个物体给出多个相近的检测框，并在所有重叠框中保留置信度最高的一个</p><p>算法过程：</p><p><strong>输入：</strong>检测器产生的一系列检测框P = {P<del>1</del>，……，P<del>n</del>}以及对应置信度s = {s<del>1</del>，……，s<del>n</del>}，IoU阈值为t</p><p><strong>步骤：</strong> 1.初始化结果集 R 为空集</p><p>​            2.重复至 P 为空集</p><ul><li>找出P中置信度最大的框Pi并加入R</li><li>从P中删除Pi以及与Pi交并比大于t的框</li></ul></li></ol><p>​        <strong>输出：</strong>结果集为R</p><h2 id="历史上的RCNN"><a href="#历史上的RCNN" class="headerlink" title="历史上的RCNN"></a>历史上的RCNN</h2><ul><li>卷积网络使用AlexNet</li><li>使用Selective Search产生提议框</li><li>非端到端训练，先训练卷积网络的主干部分，再基于卷积网络的特征训练SVM分类器</li><li>非多任务学习，先训练分类模型，再边界框回归单独训练</li><li>根据配置不同，单图推理几秒~几十秒</li></ul><h2 id="两阶段方法的演进（2014-2017）"><a href="#两阶段方法的演进（2014-2017）" class="headerlink" title="两阶段方法的演进（2014-2017）"></a>两阶段方法的演进（2014-2017）</h2><p><strong>Fast RCNN ：</strong>提出了Rol Pooling方法，把区域从图像移动到特征图上，大幅降低了计算量。</p><p>具体流程：</p><p><img src="/2022/07/01/openmmlab/image-20220706185621684.png"></p><ol><li>将原图的提议框按照几何比例缩放到特征图上</li><li>利用RoI Pooling,将不同尺寸的特征图变换到相同大小，对于每个提议框，可以的得到固定尺寸的特征图。</li><li>基于相同尺寸的特征图进行分类和回归</li></ol><p>Fast RCNN虽然速度上远超RCNN，但产生提议框仍依赖外部算法，成为速度瓶颈</p><p><strong>解决方案：</strong>使用卷积网络产生提议框，并与检测器共享主干网络结构</p><p><strong>Faster RCNN：</strong>提出了RPN网络，用于替换传统方法，产生区域提议，进一步提高效率。</p><p>使用滑窗的思路进行空间密集预测，并使用轻量网络（例如单层3×3卷积）作为检测头，降低计算量。</p><p>引入锚框的概念来处理不同大小的物体，不同的锚框共享特征，多个检测头为同一卷积层的不同通道。</p><p>RPN产生区域提议：</p><ol><li>主干网络产生特征图</li><li>不同的检测头产生区域提议(分类+边界框回归</li><li>集合所有提议框，做NMS</li></ol><p><img src="/2022/07/01/openmmlab/image-20220706212009207.png"></p><p>训练过程：</p><ul><li><p>Faster RCNN RPN Fast RCNN</p></li><li><p>每部分产生分类和回归oss</p></li><li><p>两者共同回传梯度、共同优化</p><p><img src="/2022/07/01/openmmlab/image-20220706212344427.png"></p></li></ul><p><strong>Mask RCNN：</strong>提出了ROIAlign算法替换ROIPooling，加入用于实例分割的分支。</p><p><strong>问题：</strong>RoI Pooling对非整数边界框取整，产生位置偏差</p><p><strong>思路：</strong>为保留空间精度，使用“非整数坐标”的特征</p><p>方法：插值-&gt;RoI Align （双线性插值）</p><p>算法流程：</p><ol><li>将提议区域切成固定数目的格子，例如7×7</li><li>在每个格子中，均匀选取若干采样点，如2×2=4个</li><li>通过插值方法得到每个采样点处的精确特征</li><li>所有采样点做Pooling得到输出结果</li></ol><p>单级特征图的问题：</p><p>高层次特诊空间降采样率比较大-&gt;小物体信息丢失</p><p><strong>解决思路：</strong></p><ol><li>基于低一层特侦图预测 -&gt;低层特征语义信息薄弱</li><li>图像金字塔 -&gt;低效率</li></ol><p>通过融合高＋低层次的特征 -&gt;特征金字塔网络（FPN）</p><h2 id="MMDetection"><a href="#MMDetection" class="headerlink" title="MMDetection"></a>MMDetection</h2><p><strong>mmdet：</strong></p><ul><li>API：包括训练，推理，测试的高层次API</li><li>core：anchor,bbox,mask等模块的实现</li><li>datasets：数据集支持，数据预处理与数据增强</li><li>mdels：检测模型的实现</li><li>utils：辅助工具</li></ul>]]></content>
      
      
      <categories>
          
          <category> openmmlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolov3说明</title>
      <link href="/2022/06/23/yolov3-shuo-ming/"/>
      <url>/2022/06/23/yolov3-shuo-ming/</url>
      
        <content type="html"><![CDATA[<ul><li><p>yolo是根据中心点，w和h  （速度快，互不影响）</p></li><li><p>传统目标检测：左下角和右下角的坐标</p></li></ul><p>yolo将物体分为了9种：大中小—正方形 长矩形 竖矩形</p><p>首先把图片等分，然后根据锚点画框，最后通过IOU来判断框。</p><p>偏移量：通过中心点的坐标去数格子，坐标除以格子的宽度可以得到格子的位置 再分离整数部分和小数部分，小数部分就是偏移量。（求pw,ph,分类）【对神经网络的输出取指数，最后取对数】</p><p>1*1卷积的目的是降通道，例如（32，32，10）通过（1，1，10）生成（32，32，1）的特征图</p><p>3*3卷积的目的是像素融合并进行降通道</p><p>下采样原理:图像尺寸为M<em>N。对其进行s倍下采样，即得到（M/s）</em>(N/s)尺寸的分辨率图像，s需为M和N的公约数，对于矩阵形式图像的含义即为将原始图像s*s窗口内的图像编程为一个像素，这个像素点的值就是窗口内所有像素的均值。在YOLOv3的网络结构中并未采用最大值池化或平均值池化方法进行降采样，而是采用步长为2的卷积来进行降采样。</p><p>上采样原理:图像放大几乎都是采用内插值方法，即在原有图像的基础上在各个像素之间采用合适的插值算法插入新的元素。</p><p>在YOLOv3的网络结构中共图像的像素进行了5次下采样，每次采样步长为2，所以输入图像的大小需要为32的倍数。</p><p>concat层：张量拼接 将darknet中间层和后面的某一层的上采样进行拼接（特征有前后关系，深度不同的情况下）</p><p><img src="/2022/06/23/yolov3-shuo-ming/image-20220609191045044.png"></p>]]></content>
      
      
      <categories>
          
          <category> yolo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
